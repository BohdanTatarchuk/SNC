import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

public class Bot extends TelegramLongPollingBot {

    final String about = """
                    Space Noodles Corporations - —ç—Ç–æ NFT ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –æ–±–∑–∞–≤–µ—Å—Ç–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –∫–æ—Ä–∞–±–ª—ë–º –∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏. –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π –∏–∑ 555 –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é —Ç–æ–∫–µ–Ω–æ–≤ –í—Å–µ–ª–µ–Ω–Ω–æ–π SNC.

                    –ü–æ–º–∏–º–æ —Å–∞–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–º —Ä—ã–Ω–∫–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–Ω—É—à–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ü–ª—é—à–µ–∫. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ \uD83D\uDC7E""";
    final String start = " –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ APEX 1.0.\uD83D\uDC7E\s";
    final String language = "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:";
    final String instruction = "–ó–¥–µ—Å—å —Å–∞–º–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON. –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.";
    final String menu = "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é \uD83C\uDF9B";


    @Override
    public String getBotUsername() {
        return "snc_apexbot";
    }

    @Override
    public String getBotToken() {
        return "5205088524:AAHzaUuDUrkaKIBpe5kcsbR-QI09sobhS_Y";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            //creating obligatory fields
            SendMessage message = new SendMessage();
            message.setChatId(update.getMessage().getChatId().toString());
            message.setText(update.getMessage().getText());
            String text = update.getMessage().getText();

            //check
            System.out.println(update.getMessage().getText());
            System.out.println(update.getMessage().getChatId().toString());

            //default commands
                switch (text) {
                case "/start" -> {
                    try {
                        message.setText(start);
                        execute(message);
                        execute(
                                SendMessage.builder()
                                        .text(language)
                                        .chatId(message.getChatId())
                                        .replyMarkup(getLanguageButtons())
                                        .build()
                        );
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
                case "/menu" -> {
                        try {
                            execute(
                                    SendMessage.builder()
                                            .text(menu)
                                            .chatId(message.getChatId())
                                            .replyMarkup(getMainMenuButtons())
                                            .build()
                            );
                        } catch (TelegramApiException e) {
                            e.printStackTrace();
                        }
                    }
                case "/referal" -> {
                    message.setText("*link*");
                    try {
                        execute(message);
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
                case "/about" -> {
                    try {
                        execute(
                                SendMessage.builder()
                                        .text(about)
                                        .chatId(message.getChatId())
                                        .replyMarkup(getAboutButtons())
                                        .build()
                        );
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
                case "/instruction" -> {
                    try {
                        execute(
                                SendMessage.builder()
                                        .text(instruction)
                                        .chatId(message.getChatId())
                                        .replyMarkup(getInstructionButton())
                                        .build()
                        );
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    //buttons language
    private InlineKeyboardMarkup getLanguageButtons(){
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton ukr = new InlineKeyboardButton();
        ukr.setText("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\uD83C\uDDFA\uD83C\uDDE6");

        InlineKeyboardButton ru = new InlineKeyboardButton();
        ru.setText("–†—É—Å—Å–∫–∏–π\uD83C\uDDF7\uD83C\uDDFA");

        //callback data
        ukr.setCallbackData("ukr");
        ru.setCallbackData("ru");

        //lists of buttons
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(ukr);
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(ru);

        //list of lists of buttons
        List< List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(row1);
        buttons.add(row2);

        //inline keyboard markup
        inlineKeyboardMarkup.setKeyboard(buttons);
        return inlineKeyboardMarkup;
    }

    //buttons main menu
    private InlineKeyboardMarkup getMainMenuButtons(){
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton instructions = new InlineKeyboardButton();
        instructions.setText("–ò–ù–°–¢–†–£–ö–¶–ò–ò‚ö°");

        InlineKeyboardButton aboutProject = new InlineKeyboardButton();
        aboutProject.setText("–û –ø—Ä–æ–µ–∫—Ç–µ\uD83D\uDC40");

        InlineKeyboardButton tgChannel = new InlineKeyboardButton();
        tgChannel.setText("–ö–∞–Ω–∞–ª SNC\uD83D\uDC7E");
        String link = "https://t.me/+m8CAHPeMkKowMzBi";
        tgChannel.setUrl(link);

        InlineKeyboardButton referalLink = new InlineKeyboardButton();
        referalLink.setText("–†–µ—Ñ–µ—Ä.–°—Å—ã–ª–∫–∞üîó");

        //callback data
        instructions.setCallbackData("instructions");
        tgChannel.setCallbackData("channel");
        aboutProject.setCallbackData("channel");
        referalLink.setCallbackData("channel");

        //lists of buttons
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(tgChannel);
        row1.add(instructions);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(aboutProject);
        row2.add(referalLink);

        //list of lists of buttons
        List< List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(row1);
        buttons.add(row2);

        //inline keyboard markup
        inlineKeyboardMarkup.setKeyboard(buttons);
        return inlineKeyboardMarkup;
    }

    //buttons about buttons
    private InlineKeyboardMarkup getAboutButtons(){
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton back = new InlineKeyboardButton();
        back.setText("–ù–∞–∑–∞–¥");
        back.setCallbackData("back");

        InlineKeyboardButton website = new InlineKeyboardButton();
        website.setCallbackData("website");
        String link = "https://spacenoodles.ru";
        website.setUrl(link);
        website.setText("–ù–∞—à —Å–∞–π—Ç");

        //list of lists of buttons
        List<InlineKeyboardButton> buttons = new ArrayList<>();
        buttons.add(back);
        buttons.add(website);

        List<List<InlineKeyboardButton>> list = new ArrayList<>();
        list.add(buttons);

        //inline keyboard markup
        inlineKeyboardMarkup.setKeyboard(list);
        return inlineKeyboardMarkup;
    }

    //buttons instruction
    private InlineKeyboardMarkup getInstructionButton(){
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton back = new InlineKeyboardButton();
        back.setText("–ù–∞–∑–∞–¥");
        back.setCallbackData("back");

        InlineKeyboardButton nft = new InlineKeyboardButton();
        nft.setText("–õ–∏–∫–±–µ–∑ –ø–æ NFT");
        nft.setCallbackData("nft");
        String linkNFT = "https://telegra.ph/Likbez-po-NFT-05-26";
        nft.setUrl(linkNFT);

        InlineKeyboardButton wallet = new InlineKeyboardButton();
        wallet.setText("–ö–æ—à–µ–ª–µ–∫ TON");
        wallet.setCallbackData("wallet");
        String linkWallet = "https://telegra.ph/Koshelek-TON-05-26";
        wallet.setUrl(linkWallet);

        InlineKeyboardButton termin = new InlineKeyboardButton();
        termin.setText("–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è");
        termin.setCallbackData("termin");
        String linkTermin = "https://telegra.ph/Terminologiya-05-26";
        termin.setUrl(linkTermin);

        InlineKeyboardButton safety = new InlineKeyboardButton();
        safety.setText("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å");
        safety.setCallbackData("safety");
        String linkSafety = "https://telegra.ph/Bezopasnost-05-26-2";
        safety.setUrl(linkSafety);

        //list
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(nft);
        row1.add(termin);
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(wallet);
        row2.add(safety);
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(back);

        //list of lists
        List<List<InlineKeyboardButton>> list = new ArrayList<>();
        list.add(row1);
        list.add(row2);
        list.add(row3);

        //inline keyboard markup
        inlineKeyboardMarkup.setKeyboard(list);
        return inlineKeyboardMarkup;
    }
}
